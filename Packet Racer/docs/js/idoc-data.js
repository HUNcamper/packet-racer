const MEMBERS = [
{"signature":"Cable","childcount":14,"type":"Class","name":"Cable","token":"public class Cable : MonoBehaviour ","scope":""},{"signature":"Cable.startRouter","childcount":0,"type":"Field","name":"startRouter","token":"public Router startRouter ","scope":"Cable"},{"signature":"Cable.endRouter","childcount":0,"type":"Field","name":"endRouter","token":"public Router endRouter ","scope":"Cable"},{"signature":"Cable.ready","childcount":0,"type":"Field","name":"ready","token":"public bool ready ","scope":"Cable"},{"signature":"Cable.ConnectInterface(NetInterface)","childcount":0,"type":"Method","name":"ConnectInterface","token":"public void ConnectInterface(NetInterface netInterface)","scope":"Cable","params":{"netInterface":"NetInterface"}},{"signature":"Cable.DisconnectInterface(NetInterface)","childcount":0,"type":"Method","name":"DisconnectInterface","token":"public void DisconnectInterface(NetInterface netInterface)","scope":"Cable","comments":{"summary":"Initiate to disconnect from NetInterface","param-netInterface":"NetInterface to disconnect from"},"params":{"netInterface":"NetInterface"}},{"signature":"Cable.InterfaceDisconnected(NetInterface)","childcount":0,"type":"Method","name":"InterfaceDisconnected","token":"public void InterfaceDisconnected(NetInterface netInterface)","scope":"Cable","comments":{"summary":"NetInterface initiated to disconnect","param-netInterface":"NetInterface calling the disconnection"},"params":{"netInterface":"NetInterface"}},{"signature":"Cable.Ready()","childcount":0,"type":"Method","name":"Ready","token":"public void Ready()","scope":"Cable"},{"signature":"Cable.HandlePacket(NetInterface, Packet)","childcount":0,"type":"Method","name":"HandlePacket","token":"public void HandlePacket(NetInterface sourceInterface, Packet packet)","scope":"Cable","params":{"sourceInterface":"NetInterface","packet":"Packet"}},{"signature":"CameraController","childcount":10,"type":"Class","name":"CameraController","token":"public class CameraController : MonoBehaviour ","scope":""},{"signature":"CameraController.sensitivityH","childcount":0,"type":"Field","name":"sensitivityH","token":"public float sensitivityH ","scope":"CameraController"},{"signature":"CameraController.sensitivityV","childcount":0,"type":"Field","name":"sensitivityV","token":"public float sensitivityV ","scope":"CameraController"},{"signature":"CameraController.cameraSpeed","childcount":0,"type":"Field","name":"cameraSpeed","token":"public float cameraSpeed ","scope":"CameraController"},{"signature":"CameraController.sprintMultiplier","childcount":0,"type":"Field","name":"sprintMultiplier","token":"public float sprintMultiplier ","scope":"CameraController"},{"signature":"ClickHandler","childcount":5,"type":"Class","name":"ClickHandler","token":"public class ClickHandler : MonoBehaviour ","scope":""},{"signature":"DragObject","childcount":8,"type":"Class","name":"DragObject","token":"public class DragObject : MonoBehaviour ","scope":""},{"signature":"EndDevice","childcount":5,"type":"Class","name":"EndDevice","token":"public class EndDevice : MonoBehaviour, IDevice ","scope":""},{"signature":"EndDevice.ReceivePacket(NetInterface, Packet)","childcount":0,"type":"Method","name":"ReceivePacket","token":"public void ReceivePacket(NetInterface sourceInterface, Packet packet)","scope":"EndDevice","params":{"sourceInterface":"NetInterface","packet":"Packet"}},{"signature":"EndDevice.SendPacket(Packet)","childcount":0,"type":"Method","name":"SendPacket","token":"public void SendPacket(Packet packet)","scope":"EndDevice","params":{"packet":"Packet"}},{"signature":"PacketRacer","childcount":10,"type":"Namespace","name":"PacketRacer","token":"namespace PacketRacer","scope":""},{"signature":"PacketRacer.IPv4Exception","childcount":3,"type":"Class","name":"IPv4Exception","token":"public class IPv4Exception : Exception ","scope":"PacketRacer"},{"signature":"PacketRacer.IPv4Exception.IPv4Exception()","childcount":0,"type":"Constructor","name":"IPv4Exception","token":"public  IPv4Exception()","scope":"PacketRacer.IPv4Exception"},{"signature":"PacketRacer.IPv4Exception.IPv4Exception(string)","childcount":0,"type":"Constructor","name":"IPv4Exception","token":"public  IPv4Exception(string message): base(message)","scope":"PacketRacer.IPv4Exception","params":{"message":"string"}},{"signature":"PacketRacer.IPv4Exception.IPv4Exception(string, Exception)","childcount":0,"type":"Constructor","name":"IPv4Exception","token":"public  IPv4Exception(string message, Exception inner): base(message, inner)","scope":"PacketRacer.IPv4Exception","params":{"message":"string","inner":"Exception"}},{"signature":"PacketRacer.IPv4InterfaceException","childcount":3,"type":"Class","name":"IPv4InterfaceException","token":"public class IPv4InterfaceException : Exception ","scope":"PacketRacer"},{"signature":"PacketRacer.IPv4InterfaceException.IPv4InterfaceException()","childcount":0,"type":"Constructor","name":"IPv4InterfaceException","token":"public  IPv4InterfaceException()","scope":"PacketRacer.IPv4InterfaceException"},{"signature":"PacketRacer.IPv4InterfaceException.IPv4InterfaceException(string)","childcount":0,"type":"Constructor","name":"IPv4InterfaceException","token":"public  IPv4InterfaceException(string message): base(message)","scope":"PacketRacer.IPv4InterfaceException","params":{"message":"string"}},{"signature":"PacketRacer.IPv4InterfaceException.IPv4InterfaceException(string, Exception)","childcount":0,"type":"Constructor","name":"IPv4InterfaceException","token":"public  IPv4InterfaceException(string message, Exception inner): base(message, inner)","scope":"PacketRacer.IPv4InterfaceException","params":{"message":"string","inner":"Exception"}},{"signature":"PacketRacer.IDevice","childcount":2,"type":"Interface","name":"IDevice","token":"public interface IDevice ","scope":"PacketRacer"},{"signature":"PacketRacer.NetInterface","childcount":18,"type":"Class","name":"NetInterface","token":"public class NetInterface ","scope":"PacketRacer"},{"signature":"PacketRacer.NetInterface.parentDevice","childcount":0,"type":"Field","name":"parentDevice","token":"public IDevice parentDevice ","scope":"PacketRacer.NetInterface"},{"signature":"PacketRacer.NetInterface.ready","childcount":0,"type":"Field","name":"ready","token":"public bool ready ","scope":"PacketRacer.NetInterface"},{"signature":"PacketRacer.NetInterface.NetInterface(IDevice, int, string)","childcount":0,"type":"Constructor","name":"NetInterface","token":"public  NetInterface(IDevice device, int intNum, string intType = \"g\")","scope":"PacketRacer.NetInterface","params":{"device":"IDevice","intNum":"int","intType":"string"}},{"signature":"PacketRacer.NetInterface.Ready()","childcount":0,"type":"Method","name":"Ready","token":"public void Ready()","scope":"PacketRacer.NetInterface"},{"signature":"PacketRacer.NetInterface.CableConnected(Cable)","childcount":0,"type":"Method","name":"CableConnected","token":"public void CableConnected(Cable newCable)","scope":"PacketRacer.NetInterface","comments":{"summary":"Cable initiated to connect","param-newCable":"Cable calling the connection"},"params":{"newCable":"Cable"}},{"signature":"PacketRacer.NetInterface.CableDisconnected()","childcount":0,"type":"Method","name":"CableDisconnected","token":"public void CableDisconnected()","scope":"PacketRacer.NetInterface","comments":{"summary":"Cable initiated to disconnect","param-newCable":"Cable calling the disconnection"}},{"signature":"PacketRacer.NetInterface.GetName()","childcount":0,"type":"Method","name":"GetName","token":"public string GetName()","scope":"PacketRacer.NetInterface"},{"signature":"PacketRacer.NetInterface.GetState()","childcount":0,"type":"Method","name":"GetState","token":"public bool GetState()","scope":"PacketRacer.NetInterface"},{"signature":"PacketRacer.NetInterface.GetIPAddress()","childcount":0,"type":"Method","name":"GetIPAddress","token":"public IPv4Address GetIPAddress()","scope":"PacketRacer.NetInterface"},{"signature":"PacketRacer.NetInterface.SetIPAddress(string)","childcount":0,"type":"Method","name":"SetIPAddress","token":"public void SetIPAddress(string ip)","scope":"PacketRacer.NetInterface","params":{"ip":"string"}},{"signature":"PacketRacer.NetInterface.SendPacket(Packet)","childcount":0,"type":"Method","name":"SendPacket","token":"public void SendPacket(Packet packet)","scope":"PacketRacer.NetInterface","params":{"packet":"Packet"}},{"signature":"PacketRacer.NetInterface.ReceivePacket(Packet)","childcount":0,"type":"Method","name":"ReceivePacket","token":"public void ReceivePacket(Packet packet)","scope":"PacketRacer.NetInterface","params":{"packet":"Packet"}},{"signature":"PacketRacer.IPv4InterfacePair","childcount":3,"type":"Struct","name":"IPv4InterfacePair","token":"public struct IPv4InterfacePair ","scope":"PacketRacer"},{"signature":"PacketRacer.IPv4InterfacePair.network","childcount":0,"type":"Field","name":"network","token":"public IPv4Address network ","scope":"PacketRacer.IPv4InterfacePair"},{"signature":"PacketRacer.IPv4InterfacePair.netMask","childcount":0,"type":"Field","name":"netMask","token":"public IPv4Address netMask ","scope":"PacketRacer.IPv4InterfacePair"},{"signature":"PacketRacer.IPv4InterfacePair.interfaceName","childcount":0,"type":"Field","name":"interfaceName","token":"public string interfaceName ","scope":"PacketRacer.IPv4InterfacePair"},{"signature":"PacketRacer.IPv4Address","childcount":5,"type":"Class","name":"IPv4Address","token":"public class IPv4Address ","scope":"PacketRacer"},{"signature":"PacketRacer.IPv4Address.IPv4Address(byte[])","childcount":0,"type":"Constructor","name":"IPv4Address","token":"public  IPv4Address(byte[] ip_octets)","scope":"PacketRacer.IPv4Address","params":{"ip_octets":"byte[]"}},{"signature":"PacketRacer.IPv4Address.IPv4Address(string)","childcount":0,"type":"Constructor","name":"IPv4Address","token":"public  IPv4Address(string ipv4)","scope":"PacketRacer.IPv4Address","params":{"ipv4":"string"}},{"signature":"PacketRacer.IPv4Address.ToString()","childcount":0,"type":"Method","name":"ToString","token":"public override string ToString()","scope":"PacketRacer.IPv4Address"},{"signature":"PacketRacer.IPv4Address.IPStringToOctets(string, char)","childcount":0,"type":"Method","name":"IPStringToOctets","token":"public static byte[] IPStringToOctets(string ipv4, char separator = '.')","scope":"PacketRacer.IPv4Address","params":{"ipv4":"string","separator":"char"}},{"signature":"PacketRacer.MACAddress","childcount":2,"type":"Class","name":"MACAddress","token":"public class MACAddress ","scope":"PacketRacer"},{"signature":"PacketRacer.MACAddress.MACAddress()","childcount":0,"type":"Constructor","name":"MACAddress","token":"public  MACAddress()","scope":"PacketRacer.MACAddress"},{"signature":"PacketRacer.Packet","childcount":6,"type":"Class","name":"Packet","token":"public class Packet ","scope":"PacketRacer"},{"signature":"PacketRacer.Packet.source_ipv4","childcount":0,"type":"Field","name":"source_ipv4","token":"public IPv4Address source_ipv4 ","scope":"PacketRacer.Packet"},{"signature":"PacketRacer.Packet.dest_ipv4","childcount":0,"type":"Field","name":"dest_ipv4","token":"public IPv4Address dest_ipv4 ","scope":"PacketRacer.Packet"},{"signature":"PacketRacer.Packet.message","childcount":0,"type":"Field","name":"message","token":"public string message ","scope":"PacketRacer.Packet"},{"signature":"PacketRacer.Packet.Packet()","childcount":0,"type":"Constructor","name":"Packet","token":"public  Packet()","scope":"PacketRacer.Packet"},{"signature":"PacketRacer.Packet.Packet(string, string, string)","childcount":0,"type":"Constructor","name":"Packet","token":"public  Packet(string source_ip, string dest_ip, string packetMessage = \"ping\")","scope":"PacketRacer.Packet","params":{"source_ip":"string","dest_ip":"string","packetMessage":"string"}},{"signature":"PacketRacer.Packet.Packet(IPv4Address, IPv4Address, string)","childcount":0,"type":"Constructor","name":"Packet","token":"public  Packet(IPv4Address source_ip, IPv4Address dest_ip, string packetMessage = \"ping\")","scope":"PacketRacer.Packet","params":{"source_ip":"IPv4Address","dest_ip":"IPv4Address","packetMessage":"string"}},{"signature":"PacketRacer.Tools","childcount":1,"type":"Class","name":"Tools","token":"public static class Tools ","scope":"PacketRacer"},{"signature":"PacketRacer.Tools.selectedTool","childcount":0,"type":"Field","name":"selectedTool","token":"public static int selectedTool ","scope":"PacketRacer.Tools"},{"signature":"PacketRacer.ToolSelectDropdown","childcount":4,"type":"Class","name":"ToolSelectDropdown","token":"public class ToolSelectDropdown : MonoBehaviour ","scope":"PacketRacer"},{"signature":"PacketRacer.ToolSelectDropdown.dropdown","childcount":0,"type":"Field","name":"dropdown","token":"public TMP_Dropdown dropdown ","scope":"PacketRacer.ToolSelectDropdown"},{"signature":"PacketRacer.ToolSelectDropdown.Dropdown_IndexChanged(int)","childcount":0,"type":"Method","name":"Dropdown_IndexChanged","token":"public void Dropdown_IndexChanged(int index)","scope":"PacketRacer.ToolSelectDropdown","params":{"index":"int"}},{"signature":"Router","childcount":16,"type":"Class","name":"Router","token":"public class Router : MonoBehaviour, IDevice ","scope":""},{"signature":"Router.labelName","childcount":0,"type":"Field","name":"labelName","token":"public TextMeshPro labelName ","scope":"Router"},{"signature":"Router.routingTableString","childcount":0,"type":"Field","name":"routingTableString","token":"public List<string> routingTableString ","scope":"Router"},{"signature":"Router.displayName","childcount":0,"type":"Field","name":"displayName","token":"public string displayName ","scope":"Router"},{"signature":"Router.interfaceIpList","childcount":0,"type":"Field","name":"interfaceIpList","token":"public List<string> interfaceIpList ","scope":"Router"},{"signature":"Router.interfaceList","childcount":0,"type":"Field","name":"interfaceList","token":"public List<NetInterface> interfaceList ","scope":"Router"},{"signature":"Router.ready","childcount":0,"type":"Field","name":"ready","token":"public bool ready ","scope":"Router"},{"signature":"Router.Ready()","childcount":0,"type":"Method","name":"Ready","token":"public void Ready()","scope":"Router","comments":{"summary":"Done preparing the router"}},{"signature":"Router.SetName(string)","childcount":0,"type":"Method","name":"SetName","token":"public void SetName(string name)","scope":"Router","params":{"name":"string"}},{"signature":"Router.SendPingPacket(string)","childcount":0,"type":"Method","name":"SendPingPacket","token":"public void SendPingPacket(string ip)","scope":"Router","params":{"ip":"string"}},{"signature":"Router.SendPacket(Packet)","childcount":0,"type":"Method","name":"SendPacket","token":"public void SendPacket(Packet packet)","scope":"Router","params":{"packet":"Packet"}},{"signature":"Router.ReceivePacket(NetInterface, Packet)","childcount":0,"type":"Method","name":"ReceivePacket","token":"public void ReceivePacket(NetInterface sourceInterface, Packet packet)","scope":"Router","params":{"sourceInterface":"NetInterface","packet":"Packet"}}
];
const ROOT_MEMBERS = [
{"signature":"Cable","childcount":14,"type":"Class","name":"Cable","token":"public class Cable : MonoBehaviour ","scope":""},{"signature":"CameraController","childcount":10,"type":"Class","name":"CameraController","token":"public class CameraController : MonoBehaviour ","scope":""},{"signature":"ClickHandler","childcount":5,"type":"Class","name":"ClickHandler","token":"public class ClickHandler : MonoBehaviour ","scope":""},{"signature":"DragObject","childcount":8,"type":"Class","name":"DragObject","token":"public class DragObject : MonoBehaviour ","scope":""},{"signature":"EndDevice","childcount":5,"type":"Class","name":"EndDevice","token":"public class EndDevice : MonoBehaviour, IDevice ","scope":""},{"signature":"PacketRacer","childcount":10,"type":"Namespace","name":"PacketRacer","token":"namespace PacketRacer","scope":""},{"signature":"Router","childcount":16,"type":"Class","name":"Router","token":"public class Router : MonoBehaviour, IDevice ","scope":""}
];
const BUILTIN_WORDS_REGEX = /\b(?:__arglist|abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|Dictionary|do|double|dynamic|else|enum|event|Exception|extern|false|final|finally|fixed|float|for|foreach|from|from|get|get;|goto|grouby|HashSet|if|in|in|int|interface|internal|is|List|lock|long|nameof|namespace|new|null|object|out|params|partial|private|protected|public|readonly|ref|return|sealed|select|select|set|set;|short|Single|Single32|Single64|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|UInt16|UInt32|UInt64|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|where|where|while)\b/g;
